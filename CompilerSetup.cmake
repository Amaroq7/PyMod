include_guard(DIRECTORY)
if (UNIX)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND LLVM_BUILD)
        target_compile_options(${PROJECT_NAME} PRIVATE -stdlib=libc++)
        target_include_directories(${PROJECT_NAME} SYSTEM BEFORE PRIVATE ${LLVM_BINARY_DIR}/include)
        # use LLVM linker if available
        find_program(LLD NAMES lld-${CLANG_MAJOR_VER} lld)
        if (LLD)
            get_filename_component(LLD ${LLD} NAME)
            target_link_options(${PROJECT_NAME} PRIVATE -fuse-ld=${LLD} --rtlib=compiler-rt -Wl,--as-needed)
        endif()

        if (BUILD_DYNAMIC)
            target_link_libraries(${PROJECT_NAME} PRIVATE c++ c++abi unwind)
        else()
            target_link_libraries(${PROJECT_NAME} PRIVATE c++.a c++abi.a unwind.a libclang_rt.builtins-i386.a)
        endif()

        add_dependencies(${PROJECT_NAME} llvm-project)
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR NOT LLVM_BUILD)
        set(MINIMUM_CLANG_VERSION "7.0.0")
        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS MINIMUM_CLANG_VERSION)
            message(WARNING "Clang v${CMAKE_CXX_COMPILER_VERSION} is not supported. Minimum version is ${MINIMUM_CLANG_VERSION}.")
        endif()

        if (NOT BUILD_DYNAMIC)
            target_link_options(${PROJECT_NAME} PRIVATE -static-libgcc -static-libstdc++)
        endif()

        if ((CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS "9.0.0") OR NOT LLVM_BUILD)
            target_link_options(${PROJECT_NAME} PRIVATE -lstdc++fs)
        endif()
    else()
        message(FATAL_ERROR "Either Clang or GCC is supported.")
    endif()
else()
    if (NOT CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(FATAL_ERROR "Only MSVC is supported.")
    endif()
endif()
